<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>NMDC Protocol</title>
    <date>March 2013</date>
    <author>
        <firstname>Fredrik</firstname>
        <surname>Ullner</surname>
        <email>ullner@gmail.com</email>
    </author>
    <authorinitials>FU</authorinitials>
<revhistory><revision><revnumber>1.3</revnumber><date>March 2013</date><authorinitials>FU</authorinitials></revision></revhistory>
</articleinfo>
<abstract id="_abstract">
<simpara>Neo-Modus Direct Connect (NMDC) is a text protocol for a client-server network. The same protocol structure is used both for client-hub and client-client communication. This document is split into two parts; the first shows the structure of the protocol, while the second implements a specific system using this structure.</simpara>
<simpara>NMDC was written by Jon Hess, in the implementation of the (proprietary) NMDC client and hub software, but was never documented. The protocol was reverse-engineered later on by others, and soon followed open implementations. Extensions have followed over the years and may be incompatible with the original NMDC software.</simpara>
</abstract>
<section id="_authors">
<title>Authors</title>
<simpara>The protocol&#8217;s basic outline was written by Jon Hess in 1998 for the NMDC client. Major influencers in the development that followed of NMDC include (in no particular order): Jacek Sieka, Sid, aDe, David Marwood, Suxxx, Stefan Gorling, Sphinx, HaArd and others.</simpara>
<simpara>This document uses information from many sources, including but not limited to;</simpara>
<itemizedlist>
<listitem>
<simpara>
Ptokax Wiki <ulink url="http://wiki.ptokax.ch">http://wiki.ptokax.ch</ulink> and <ulink url="http://wiki.ptokax.org">http://wiki.ptokax.org</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
TeamFair wiki <ulink url="http://www.teamfair.info/wiki/">http://www.teamfair.info/wiki/</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
The Nighthawk forum
</simpara>
</listitem>
<listitem>
<simpara>
Mutor protocol doc <ulink url="http://mutor.no-ip.com:413/protocol.htm">http://mutor.no-ip.com:413/protocol.htm</ulink>
</simpara>
</listitem>
</itemizedlist>
<simpara>This document was compiled by Fredrik Ullner.</simpara>
</section>
<section id="_version_history">
<title>Version history</title>
<simpara>The latest draft of the next version of this document as well as intermediate
and older versions can be downloaded from
$URL: <ulink url="https://nmdc.svn.sourceforge.net/svnroot/nmdc/trunk/NMDC.txt">https://nmdc.svn.sourceforge.net/svnroot/nmdc/trunk/NMDC.txt</ulink> $.
This version corresponds to $Revision: 25 $.</simpara>
<section id="_version_1_4">
<title>Version 1.4</title>
<simpara>UNRELEASED</simpara>
<itemizedlist>
<listitem>
<simpara>
Added $SetIcon extension
</simpara>
</listitem>
<listitem>
<simpara>
Added note on $ADCGet&#8217;s use of ADC fields
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_version_1_3">
<title>Version 1.3</title>
<simpara>Fredrik Ullner &lt;<ulink url="mailto:ullner@gmail">ullner@gmail</ulink>&gt;, 2013-03-09</simpara>
<itemizedlist>
<listitem>
<simpara>
Changed note about escape sequences
</simpara>
</listitem>
<listitem>
<simpara>
Added IPv4 and IPv6 extensions
</simpara>
</listitem>
<listitem>
<simpara>
More clarification on $MyInfo&#8217;s flag
</simpara>
</listitem>
<listitem>
<simpara>
Moved some commands to/from extensions
</simpara>
</listitem>
<listitem>
<simpara>
Added note about XmlBzList and DC++'s dropped support
</simpara>
</listitem>
<listitem>
<simpara>
Added TLS and DHT extensions
</simpara>
</listitem>
<listitem>
<simpara>
Clarified (corrected) $UserIP and UserIP2
</simpara>
</listitem>
<listitem>
<simpara>
Added $Cancel and noted that $Canceled was only used briefly
</simpara>
</listitem>
<listitem>
<simpara>
Added QP extension
</simpara>
</listitem>
<listitem>
<simpara>
Added $Failover extension
</simpara>
</listitem>
<listitem>
<simpara>
Added security considerations to the protocol
</simpara>
</listitem>
<listitem>
<simpara>
Added URI scheme description
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_version_1_2">
<title>Version 1.2</title>
<simpara>Fredrik Ullner &lt;<ulink url="mailto:ullner@gmail.com">ullner@gmail.com</ulink>&gt;, 2013-01-16</simpara>
<itemizedlist>
<listitem>
<simpara>
Added $ZOn and ZPipe0 feature.
</simpara>
</listitem>
<listitem>
<simpara>
Fixed use of ASCIIDoc regarding a "link" in $Key.
</simpara>
</listitem>
<listitem>
<simpara>
Added some minor descriptions to the extensions Feed and OpPlus.
</simpara>
</listitem>
<listitem>
<simpara>
Added note about <emphasis>Ref</emphasis> in a $Lock.
</simpara>
</listitem>
<listitem>
<simpara>
Added SaltPass feature
</simpara>
</listitem>
<listitem>
<simpara>
Introduced a new category, "Extensions (commands)" to signify that a command require an a $Support and/or is not in the original implementations.
</simpara>
</listitem>
<listitem>
<simpara>
Added note about source of information within this document.
</simpara>
</listitem>
<listitem>
<simpara>
Changed $MyINFO according to how the flag is used.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_version_1_1">
<title>Version 1.1</title>
<simpara>Fredrik Ullner &lt;<ulink url="mailto:ullner@gmail.com">ullner@gmail.com</ulink>&gt;, 2013-01-02</simpara>
<itemizedlist>
<listitem>
<simpara>
Added additional commands and extensions to document
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_version_1_0">
<title>Version 1.0</title>
<simpara>Fredrik Ullner &lt;<ulink url="mailto:ullner@gmail.com">ullner@gmail.com</ulink>&gt;</simpara>
<itemizedlist>
<listitem>
<simpara>
Initial release
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section id="_protocol">
<title>Protocol</title>
<section id="_general">
<title>General</title>
<itemizedlist>
<listitem>
<simpara>
Most messages begin with a <emphasis>$</emphasis> (dollar sign).
</simpara>
</listitem>
<listitem>
<simpara>
Most messages end with a <emphasis>|</emphasis> (pipe).
</simpara>
</listitem>
<listitem>
<simpara>
Command names and parameters use single space (' ') and additional dollar signs as separators.
</simpara>
</listitem>
<listitem>
<simpara>
There is no standardization on code page to use. The local charset of the computer system is commonly used. The original implementation used win.1252.
</simpara>
</listitem>
<listitem>
<simpara>
Hub port defaults to 411. The client should then try 412, 413 etc.
</simpara>
</listitem>
<listitem>
<simpara>
Client - Client port defaults to 412.
</simpara>
</listitem>
<listitem>
<simpara>
Some command names are incorrectly spelled, per the original protocol. This document notes when a spelling error is <emphasis>intentional</emphasis>, per the original protocol.
</simpara>
</listitem>
<listitem>
<simpara>
The hub should validate that the client sending the message is actually the correct user.
</simpara>
</listitem>
<listitem>
<simpara>
This document does not (mainly) use <emphasis>&lt;</emphasis> and <emphasis>&gt;</emphasis> brackets for illustration purposes; any occurrence should be taken literally, unless otherwise noted.
</simpara>
</listitem>
<listitem>
<simpara>
This document use <emphasis>[</emphasis> and <emphasis>]</emphasis> brackets for optional data; any literal occurrence will be noted as such.
</simpara>
</listitem>
</itemizedlist>
<simpara>There are different types of routed messages:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Client to Hub</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Client to Hub to Client</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Hub to Client</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Hub to Hub</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Hub to Hublist</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pinger to Hub</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section id="_status_messages">
<title>Status messages</title>
<simpara>Most clients send a chat message to all users to indicate that a user has been kicked. That is, if a client A kicks client B, client A will send out a message to client C and D to indicate that the client B is kicked. To avoid being potentially flooded by this message, clients have implemented a de facto message to indicate kicks.
 &lt;john&gt; is kicking peter because: I am not a dog person|
The key aspect here is the two phrases "is kicking" and "because:". Including these two parts, regardless of the other content, will cause most clients to show the message as a status bar message.</simpara>
<simpara>Note that the hub will not actually treat this as a kick.</simpara>
</section>
<section id="_reference_to_hub_in_lock">
<title>Reference to hub in $Lock</title>
<simpara>To identify the source of the hub in a client - client connection, some clients add a reference to the hub in the $Lock that is sent, where the information is placed in the Pk parameter.</simpara>
<simpara>This information can also be provided in a client - hub connection.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$Lock EXTENDEDPROTOCOLABCABCABCABCABCABC Pk=DCPLUSPLUS0.666Ref=example.com:411</literallayout>
</informalexample>
</section>
<section id="_escape_sequences">
<title>Escape sequences</title>
<simpara>There are two ways protocol delimiters are displayable (dollar sign, pipe etc);</simpara>
<section id="_method_1">
<title>Method 1</title>
<simpara>By using /%DCNXXX%/ where XXX is the decimal number for an ASCII character.</simpara>
<simpara>This escape sequence method is used by all implementations for the $Key/$Lock sequence (see below). This is also used by multiple implementations for normal viewing purposes (e.g. in a chat message).</simpara>
<simpara>This escape sequence predates the second method listed below.</simpara>
<simpara>The following escape sequences exist for this method;</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Escape sequence </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>/%DCN000%/</simpara></entry>
<entry align="left" valign="top"><simpara>0x0a, null character. Not allowed elsewhere in the protocol.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/%DCN005%/</simpara></entry>
<entry align="left" valign="top"><simpara>Enquiry character. Used by some commands.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/%DCN036%/</simpara></entry>
<entry align="left" valign="top"><simpara>$, dollar sign. Used by (almost) all commands.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/%DCN096%/</simpara></entry>
<entry align="left" valign="top"><simpara>`, grave accent.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/%DCN124%/</simpara></entry>
<entry align="left" valign="top"><simpara>|, pipe. Used at end of commands.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/%DCN126%/</simpara></entry>
<entry align="left" valign="top"><simpara>~, tilde.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">&lt;John&gt; I am going to display a dollar sign /%DCN036%/ and then a pipe /%DCN124%/.|</literallayout>
</informalexample>
</section>
<section id="_method_2">
<title>Method 2</title>
<simpara>By using the HTML equivalent of the character.</simpara>
<simpara>This escape sequence was created in and is used by DC++.</simpara>
<simpara>Note that DC++ uses the first method for the $Key/$Lock sequence. DC++ uses this method for displayment purposes (e.g. chat messages).</simpara>
<simpara>The following escape sequences exist for this method;</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Escape sequence </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>&amp;#36;</simpara></entry>
<entry align="left" valign="top"><simpara>$, dollar sign. Used by (almost) all commands.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>&amp;#124;</simpara></entry>
<entry align="left" valign="top"><simpara>|, pipe. Used at end of commands.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>&amp;amp;</simpara></entry>
<entry align="left" valign="top"><simpara>&amp;, ampersand.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">&lt;John&gt; I am going to display a dollar sign &amp;#36; and then a pipe &amp;#124;.|</literallayout>
</informalexample>
</section>
</section>
<section id="_key_lock_sequence">
<title>$Key/$Lock sequence</title>
<simpara>After the first NMDC client and hub was introduced, others began to create their own implementation of the NMDC protocol. The original NMDC client and hub was freeware but not open source. In a way to combat other implementations, the author of the protocol decided upon a way to restrict the other implementations by a pseudo-cryptographic key exchange.</simpara>
<simpara>This exchange is typically referenced as a pseudo-Diffie-Hellman key exchange for its similarity, although they are not equivalent.</simpara>
<simpara>The $Key and $Lock commands are not listed as extensions as they exist in at least NMDC hub 1.0.25 and NMDC client 1.0 Preview Build 9.1.</simpara>
</section>
</section>
<section id="_security_considerations">
<title>Security Considerations</title>
<section id="_distributed_denial_of_service_potential">
<title>Distributed Denial of Service Potential</title>
<simpara>The ongoing operation of NMDC&#8217;s peer to peer connections provides
opportunities for both malicious clients on certain hubs and
malicious hubs to coordinate clients of those hubs in connecting en
masse to an arbitrarily specified IP address and port. Hubs SHOULD
mitigate this risk by only relaying such connection requests when
it can verify that the IP addresses and ports contained therein
belong to clients initiating such peer to peer connection requests.
Clients SHOULD effect similar amelioration through both attempting to
reconnect only to hubs to which they have initially connected once
and by providing upon connection referrer information regarding which
hub has relayed to them the IP and port to which they are connecting.</simpara>
<simpara>See also "Reference to hub in $Lock".</simpara>
</section>
<section id="_case_sensitivity_mismatches_and_duplicated_shares_entries">
<title>Case-sensitivity Mismatches and Duplicated Shares Entries</title>
<simpara>Both accidentally due to differences in filesystem case-sensitivity
assumptions and intentionally by malicious clients can arise
filelists containing either entires either entirely or up to case
identical. Client software SHOULD detect these cases and avoid
wasteful downloading.</simpara>
</section>
<section id="_filelist_processing_memory_usage">
<title>Filelist Processing Memory Usage</title>
<simpara>The bzip2-compressed filelists that NMDC URIs ending in a separator
are required to process potentially expand due to malicious
construction to cause a processing client to exhaust its memory or
address-space capacity. Likewise, even non-malicious filelists can
grow arbitrarily large such that in combination with other memory
requirements of client software, similar exhaustion occurs. Client
software therefore SHOULD bound bzip2 decompression memory usage and
use streaming XML APIs to process filelists.</simpara>
<simpara>See <footnote id="DC++ 0.75 and older vulnerable to bzip2 filelist bomb"><simpara><ulink url="https://dcpp.wordpress.com/2010/03/12/dc-0-75-and-older-vulnerable-to-bzip2-filelist-bomb/">https://dcpp.wordpress.com/2010/03/12/dc-0-75-and-older-vulnerable-to-bzip2-filelist-bomb/</ulink></simpara></footnote> for more information.</simpara>
</section>
<section id="_excessive_local_storage_consumption">
<title>Excessive Local Storage Consumption</title>
<simpara>The zlib compression supported by NMDC for client-client transfers
permits construction of transferred data which consume disk space
substantially more rapidly for the downloading client than network
bandwidth would indicate. Client software SHOULD monitor downloads
for impending storage capacity limits with a view to prevent local
denials of service resulting from exceeding them.</simpara>
</section>
</section>
<section id="_uri_scheme">
<title>URI scheme</title>
<simpara>See the URI scheme document following this document.</simpara>
</section>
<section id="_commands">
<title>Commands</title>
<section id="_chat_message">
<title>Chat message</title>
<literallayout class="monospaced">&lt;nick&gt; message|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client, Hub &#8594; Client</simpara>
<simpara>Will send a chat message by <emphasis>nick</emphasis>. The hub should broadcast the message to all clients if a client send this.</simpara>
<simpara>Note that the brackets (&lt; and &gt;) are required. Some implementations allow spaces in the nickname; be aware that other implementations may simply search for the first occurrence of a space. If the chat message contain a pipe, it should be replaced by its HTML equivalent.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">&lt;John&gt; cats are cute|</literallayout>
</informalexample>
</section>
<section id="_to">
<title>$To</title>
<literallayout class="monospaced">$To: othernick From: nick $&lt;nick&gt; message|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client, Hub &#8594; Client</simpara>
<simpara>Will send a private message from one user to another user. The same rules as a basic chat message apply.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$To: john From: peter $&lt;peter&gt; dogs are more cute|</literallayout>
</informalexample>
</section>
<section id="_connecttome">
<title>$ConnectToMe</title>
<literallayout class="monospaced">$ConnectToMe RemoteNick SenderIp:SenderPort</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client</simpara>
<simpara>Request that remotenick connect to the sending user for an active TCP connection for file transfers. Clients sending this must allow incoming TCP connections. There is no default port.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$ConnectToMe john 192.168.1.2:412|</literallayout>
</informalexample>
<simpara>Note that the above is for older clients.</simpara>
<simpara>Newer versions of NMDC client include the sender&#8217;s nick as well (but may not be compatible with all implementations);</simpara>
<literallayout class="monospaced">$ConnectToMe SenderNick RemoteNick SenderIp:SenderPort</literallayout>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$ConnectToMe peter john 192.168.1.2:412|</literallayout>
</informalexample>
</section>
<section id="_revconnecttome">
<title>$RevConnectToMe</title>
<literallayout class="monospaced">$RevConnectToMe SenderNick RemoteNick|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client</simpara>
<simpara>Request that the remotenick send a ConnectToMe back to SenderNick. Clients sending do not allow incoming TCP connections whereas the remote user does (or should).</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$RevConnectToMe peter john|</literallayout>
</informalexample>
</section>
<section id="_ping">
<title>$Ping</title>
<literallayout class="monospaced">$Ping sender_ip:sender_port|</literallayout>
<simpara>sender_ip is the IP address of the remote client.</simpara>
<simpara>sender_port is the port of the remote client that is being listened to.</simpara>
</section>
<section id="_getpass">
<title>$GetPass</title>
<literallayout class="monospaced">$GetPass|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Request that the client send a password that correspond to a user account (matched by the user&#8217;s nick name).</simpara>
</section>
<section id="_mypass">
<title>$MyPass</title>
<literallayout class="monospaced">$MyPass password|</literallayout>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>Providing the password (in plain text) to the hub after a request. Implementations should be aware of potential pipe and dollar signs in the password.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$MyPass qwerty|</literallayout>
</informalexample>
</section>
<section id="_logedin">
<title>$LogedIn</title>
<literallayout class="monospaced">$LogedIn nick|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Sent to users who successfully log in. Note that the message should only be sent to operators. Note that some implementations do not use this command. The spelling of this command is not a mistake.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$LogedIn john|</literallayout>
</informalexample>
</section>
<section id="_get">
<title>$Get</title>
<literallayout class="monospaced">$Get file$offset|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>file is the remote location (including path) of the file.</simpara>
<simpara>offset is the byte offset to start at for resuming files.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$Get C:/Uploads/myfile.txt$15|</literallayout>
</informalexample>
</section>
<section id="_send">
<title>$Send</title>
<literallayout class="monospaced">$Send|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This is used as a way to specify that the file should be sent. The uploader should proceed to stream the amount of bytes requested previously.</simpara>
</section>
<section id="_provide_file_size">
<title>Provide file size</title>
<literallayout class="monospaced">$FileLength file_size|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This command is used as a way to provide the size of the file requested.</simpara>
</section>
<section id="_getlistlen">
<title>$GetListLen</title>
<literallayout class="monospaced">$GetListLen|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>Get file list size.</simpara>
</section>
<section id="_listlen">
<title>$ListLen</title>
<literallayout class="monospaced">$ListLen file_size|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This command is used as a way to provide the size of the file list of the client.</simpara>
</section>
<section id="_direction">
<title>$Direction</title>
<literallayout class="monospaced">$Direction direction number|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This command is used as a way to decide which party should be allowed to download.</simpara>
<simpara>The direction is either <emphasis>Upload</emphasis> or <emphasis>Download</emphasis>, depending on whether the connection request is a ConnectToMe or ReverseConnectToMe.</simpara>
<simpara>The number is a random number (above 0), typically between 1 and 32767. If both clients want to download, the client with the highest number gets to start downloading first. If the numbers are equal, the connection is closed.</simpara>
<simpara>This command should be sent;</simpara>
<itemizedlist>
<listitem>
<simpara>
After a $Key command or
</simpara>
</listitem>
<listitem>
<simpara>
After a $Lock command with EXTENDED information
</simpara>
</listitem>
</itemizedlist>
<simpara>I.e., if the $Lock is EXTENDED, $Direction MUST be sent after the $Lock command and not the $Key command.</simpara>
<simpara>Implementation note: The highest number DC++ sends is 32767 (2^15-1, 0x7FFF) as the Neo-Modus Direct Connect client will disconnect if it receives a higher number. Clients can send a higher value, in risk of losing compatibility.</simpara>
<simpara>Implementation note: A potential bug, that may be fixed, in DC++ revolved around the following circumstance;</simpara>
<itemizedlist>
<listitem>
<simpara>
Client A has 0 free slots
</simpara>
</listitem>
<listitem>
<simpara>
Client B has free slots (doesn&#8217;t matter how many)
</simpara>
</listitem>
<listitem>
<simpara>
Client A and client B want a file from one another
</simpara>
</listitem>
<listitem>
<simpara>
Client A loses the random number "battle"
</simpara>
</listitem>
</itemizedlist>
<simpara>Client B will not get a slot because of client A does not have any slots available. DC++'s status bar of client B will say "Connecting&#8230;" instead of saying "No slots available" that is the de facto message. A suggested patch involve "cheating"; client B will use a high random number after it has lost and will return to normal when it has won.</simpara>
</section>
<section id="_cancel">
<title>$Cancel</title>
<literallayout class="monospaced">$Cancel</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This command is used as way to indicate that the transfer of a file should be cancelled prematurely.</simpara>
<simpara>This command is sent by the downloader. When the uploader receives the message, it should stop sending data followed by a $Canceled. It is possible that some implementations continue to send some data after the $Cancel and $Canceled; the downloader should discard this data.</simpara>
<simpara>This command was only implemented in NMDC v.1 and not in subsequent version or in other clients.</simpara>
<simpara>Note that there is no pipe (|) at the end of this command!</simpara>
</section>
<section id="_canceled">
<title>$Canceled</title>
<literallayout class="monospaced">$Canceled</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This command is used as way to indicate that the transfer of a file was cancelled prematurely.</simpara>
<simpara>This command is sent by the uploader.</simpara>
<simpara>This command was only implemented in NMDC v.1 and not in subsequent version or in other clients.</simpara>
<simpara>The spelling of this command is not a mistake.</simpara>
<simpara>Note that there is no pipe (|) at the end of this command!</simpara>
</section>
<section id="_badpass">
<title>$BadPass</title>
<literallayout class="monospaced">$BadPass|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Indicates that the supplied password is invalid. The client shall be immediately disconnected after this message is sent.</simpara>
</section>
<section id="_hubisfull">
<title>$HubIsFull</title>
<literallayout class="monospaced">$HubIsFull|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Indicates that the hub has reached its maximum amount of users and will not accept additional users.</simpara>
</section>
<section id="_validatedenide">
<title>$ValidateDenide</title>
<literallayout class="monospaced">$ValidateDenide nick|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>The requested nick name is already taken by or is reserved for another user. The spelling of this command is not a mistake.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$ValidateDenide john|</literallayout>
</informalexample>
</section>
<section id="_maxedout">
<title>$MaxedOut</title>
<literallayout class="monospaced">$MaxedOut|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>Sent by a client to another when there are no more slots available upon request of files.</simpara>
<simpara>See the QP extension for an extended $MaxedOut.</simpara>
</section>
<section id="_failed">
<title>$Failed</title>
<literallayout class="monospaced">$Failed message|</literallayout>
<simpara>Contexts: Client &#8594; Hub, Client &#8594; Hub &#8594; Client, Client &#8594; Client, Hub &#8594; Client</simpara>
<simpara>General purpose fail command. Implementations may use this command to signify files that are not available. $Failed is usually sent in response to a GetZBlock, UGetBlock and UGetZBlock.</simpara>
</section>
<section id="_error">
<title>$Error</title>
<literallayout class="monospaced">$Error message|</literallayout>
<simpara>Contexts: Client &#8594; Hub, Client &#8594; Hub &#8594; Client, Client &#8594; Client, Hub &#8594; Client</simpara>
<simpara>General purpose fail command. Implementations may use this command to signify files that are not available. $Failed is usually sent in response to a GetZBlock, UGetBlock and UGetZBlock.</simpara>
</section>
<section id="_search">
<title>$Search</title>
<literallayout class="monospaced">$Search ip:port search_string|
$Search Hub:nick search_string|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client</simpara>
<simpara>The former is sent by active clients and the latter for passive clients. The IP is the client&#8217;s own IP address and the port is an open UDP port that accept incoming UDP traffic. "Hub" should be taken literally. The nick is the nickname of the searching user.</simpara>
<section id="_the_search_string">
<title>The search string</title>
<simpara>The string describing the file or directory the client is searching for. It is made up of a question mark (<emphasis>?</emphasis>) delimited string as follows:</simpara>
<literallayout class="monospaced">size_restricted?is_max_size?size?data_type?search_pattern</literallayout>
<simpara>size_restricted is <emphasis>T</emphasis> if the search should be restricted to files of a minimum or maximum size, otherwise <emphasis>F</emphasis>.</simpara>
<simpara>is_max_size is <emphasis>F</emphasis> if size_restricted is <emphasis>F</emphasis> or if the size restriction places a lower limit on file size, otherwise <emphasis>T</emphasis>.</simpara>
<simpara>size is the minimum or maximum size of the file to search for (according to is_max_size) if size_restricted is <emphasis>T</emphasis>, otherwise 0.</simpara>
<simpara>data_type restricts the search to files of a particular type. It is an integer selected from:</simpara>
<itemizedlist>
<listitem>
<simpara>
1 - For any file type
</simpara>
</listitem>
<listitem>
<simpara>
2 - For audio files
</simpara>
</listitem>
<listitem>
<simpara>
3 - For compressed files
</simpara>
</listitem>
<listitem>
<simpara>
4 - For document files
</simpara>
</listitem>
<listitem>
<simpara>
5 - For executable files
</simpara>
</listitem>
<listitem>
<simpara>
6 - For picture files
</simpara>
</listitem>
<listitem>
<simpara>
7 - For video files
</simpara>
</listitem>
<listitem>
<simpara>
8 - For folders
</simpara>
</listitem>
<listitem>
<simpara>
9 - For TTH searching
</simpara>
</listitem>
</itemizedlist>
<simpara>search_pattern is used by other users to determine if any files match. If it is a TTH search, search_pattern should be "TTH:hash".</simpara>
<simpara>Spaces in the search pattern are replaced by a dollar sign <emphasis>$</emphasis>. [CHECK: "As with all NMDC messages, <emphasis>$</emphasis> and <emphasis>|</emphasis> are escaped with "$" and "|", with <emphasis>&amp;</emphasis> being further replaced with "&amp;"."]</simpara>
<simpara>Examples:</simpara>
<informalexample>
<simpara>Active search:</simpara>
<literallayout class="monospaced">$Search 192.168.1.5:412 T?T?500000?1?Gentoo$2005
$Search Hub:SomeNick T?T?500000?1?Gentoo$2005</literallayout>
</informalexample>
<informalexample>
<simpara>Passive search:</simpara>
<literallayout class="monospaced">$Search 192.168.1.5:412 F?T?0?9?TTH:TO32WPD6AQE7VA7654HEAM5GKFQGIL7F2BEKFNA
$Search Hub:SomeNick F?T?0?9?TTH:TO32WPD6AQE7VA7654HEAM5GKFQGIL7F2BEKFNA</literallayout>
</informalexample>
</section>
</section>
<section id="_sr">
<title>$SR</title>
<literallayout class="monospaced">$SR source_nick result free_slots/total_slots&lt;0x05&gt;hub_name (hubip[:port])[&lt;0x05&gt;target_nick]|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client, Client &#8594; Client</simpara>
<simpara>Sent by a client when a match to a search is found.</simpara>
<simpara>If the $Search was a passive one, the $SR is returned via the hub connection (TCP). In this case, &lt;0x05&gt;target_nick must be included on the end of the $SR. The hub must strip the deliminator and &lt;target_nick&gt; before sending the $SR to target_nick. If the search was active, it is sent to the IP address and port specified in the $Search via UDP.</simpara>
<simpara>Result is one of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>
filename&lt;0x05&gt;filesize
</simpara>
</listitem>
<listitem>
<simpara>
directoryname
</simpara>
</listitem>
</itemizedlist>
<simpara>File size shall be in bytes.</simpara>
<simpara>"&lt;0x05&gt;" used above for deliminators are the 5th character in the ASCII character set. The brackets should consequentially not be taken literally.</simpara>
<simpara>The port for the hub only needs to specified if its listening port is not the default (411).</simpara>
<simpara>On UNIX, the path delimiter / must be converted to \ for compatibility.</simpara>
<simpara>Implementations should send a maximum of 5 search results to passive users and 10 search results to active users.</simpara>
<simpara>Free_slots are the amount of available slots left. Total_slots are the total amount of slots.</simpara>
<simpara>For files containing TTH, the hub_name parameter is replaced with TTH:hash</simpara>
<simpara>Examples:</simpara>
<informalexample>
<simpara>Active result:</simpara>
<literallayout class="monospaced">$SR User1 ponies.txt&lt;0x05&gt;437 3/4&lt;0x05&gt;Testhub (192.168.1.1:411)|
$SR User5 images 0/4&lt;0x05&gt;Testhub (192.168.1.1:411)|
$SR User6 pictures 0/4&lt;0x05&gt;Testhub (192.168.1.1)|</literallayout>
</informalexample>
<informalexample>
<simpara>Passive result:</simpara>
<literallayout class="monospaced">$SR User1 ponies.txt&lt;0x05&gt;437 3/4&lt;0x05&gt;Testhub (192.168.1.1:411)&lt;0x05&gt;User2|
$SR User5 images 0/4&lt;0x05&gt;Testhub (192.168.1.1:411)&lt;0x05&gt;User2|
$SR User6 pictures 0/4&lt;0x05&gt;Testhub (192.168.1.1)&lt;0x05&gt;User2|</literallayout>
</informalexample>
</section>
<section id="_myinfo">
<title>$MyINFO</title>
<literallayout class="monospaced">$MyINFO $ALL nick description$ $&lt;connection&gt;&lt;flag&gt;$mail$share_size$|</literallayout>
<simpara>Contexts: Client &#8594; Hub (&#8594; Client)</simpara>
<simpara>This command is part of the Client-Hub Handshake and during login, and is sent after the client receive $Hello with their own nick. Client resend this on any change. It&#8217;s broadcasted to all clients.</simpara>
<simpara>The <emphasis>&lt;</emphasis> and <emphasis>&gt;</emphasis> use in here should not be taken literally; they are there to visually distinguish connection from flag. Consequently, the flag shall immediately follow the connection.</simpara>
<simpara>Connection is a string for the connection:</simpara>
<itemizedlist>
<listitem>
<simpara>
Default NMDC1 connections types 28.8Kbps, 33.6Kbps, 56Kbps, Satellite, ISDN, DSL, Cable, LAN(T1), LAN(T3)
</simpara>
</listitem>
<listitem>
<simpara>
Default NMDC2 connections types Modem, DSL, Cable, Satellite, LAN(T1), LAN(T3)
</simpara>
</listitem>
</itemizedlist>
<simpara>Later implementations also send other speeds. Implementations should simply display the value to the user and not create any inhibitions based on the reported speed.</simpara>
<section id="_flag">
<title>Flag</title>
<simpara>Flag is a ASCII character (8 bit byte).</simpara>
<simpara>There are multiple implementations of this byte.</simpara>
<simpara>The values listed here are the bits within the flag byte. The following is the original:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Bit </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Normal or no status.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>Away.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>Server status. Used when the client has uptime &gt; 2 hours, &gt; 2 GB shared, upload &gt; 200 MB.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>Fireball status. Used when the client has had an upload &gt; 100 kB/s.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The values listed here are the bits within the flag byte. Newer implementations change the numbers to be extensions of the original and are the following:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Bit </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>Support for TLS. For all connections when TLS extension is supported. For download only when TLS1 extension is supported.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>Support for TLS upload when TLS1 extension is supported.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>Support for IPv4 when IP64 extension is supported.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>8</simpara></entry>
<entry align="left" valign="top"><simpara>Support for IPv6 when IP64 extension is supported.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The values listed here are decimal values. Other implementations interpreted this to be the following:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Decimal </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Normal</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2 and 3</simpara></entry>
<entry align="left" valign="top"><simpara>Away</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4 and 5</simpara></entry>
<entry align="left" valign="top"><simpara>Server. Used when the client has uptime &gt; 2 hours, &gt; 2 GB shared, upload &gt; 200 MB.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>6 and 7</simpara></entry>
<entry align="left" valign="top"><simpara>Server away</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>8 and 9</simpara></entry>
<entry align="left" valign="top"><simpara>Fireball. Used when the client has had an upload &gt; 100 kB/s.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>10 and 11</simpara></entry>
<entry align="left" valign="top"><simpara>Fireball away</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Example verification with the first and second approach:</simpara>
<informalexample>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Flag calculation </entry>
<entry align="left" valign="top">Result</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x1</simpara></entry>
<entry align="left" valign="top"><simpara>Normal status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x2</simpara></entry>
<entry align="left" valign="top"><simpara>Away status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x4</simpara></entry>
<entry align="left" valign="top"><simpara>Server status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x8</simpara></entry>
<entry align="left" valign="top"><simpara>Fireball status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x10</simpara></entry>
<entry align="left" valign="top"><simpara>TLS support for downloads</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x20</simpara></entry>
<entry align="left" valign="top"><simpara>TLS support for uploads (with TLS1)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x40</simpara></entry>
<entry align="left" valign="top"><simpara>IPv4 support</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag &amp; 0x80</simpara></entry>
<entry align="left" valign="top"><simpara>IPv6 support</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</informalexample>
<simpara>Example verification with the third approach:</simpara>
<informalexample>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Flag calculation </entry>
<entry align="left" valign="top">Result</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>if Flag == 1 )</simpara></entry>
<entry align="left" valign="top"><simpara>Normal status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag == 2 OR Flag == 3</simpara></entry>
<entry align="left" valign="top"><simpara>Away status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag == 4 OR Flag == 5</simpara></entry>
<entry align="left" valign="top"><simpara>Server status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag == 6 OR Flag == 7</simpara></entry>
<entry align="left" valign="top"><simpara>Server and away status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag == 8 OR Flag == 9</simpara></entry>
<entry align="left" valign="top"><simpara>Fireball status</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>if Flag == 10 OR Flag == 11</simpara></entry>
<entry align="left" valign="top"><simpara>Fireball and away status</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</informalexample>
</section>
<section id="_tag">
<title>Tag</title>
<simpara>This addition to the description field was introduced to ease concerns by hub operators that DC++ users were joining too many hubs and not allowing enough uploads. (The original DC client only allowed users to join a single hub.) The tag is now the de facto standard.</simpara>
<simpara>Example:</simpara>
<informalexample>
<simpara>&lt;++ V:0.673,M:P,H:0/1/0,S:2&gt;</simpara>
</informalexample>
<itemizedlist>
<listitem>
<simpara>
"++": indicates the client (in this case, DC++)
</simpara>
</listitem>
<listitem>
<simpara>
"V": tells you the version number
</simpara>
</listitem>
<listitem>
<simpara>
"M": tells if the user is in active (A), passive (P), or SOCKS5 (5) mode
</simpara>
</listitem>
<listitem>
<simpara>
"H": tells how many hubs the user is on and what is his status on the hubs. The first number means a normal user, second means VIP/registered hubs and the last one operator hubs (separated by the forward slash [<emphasis>/</emphasis>]).
</simpara>
</listitem>
<listitem>
<simpara>
"S": tells the number of slots user has opened
</simpara>
</listitem>
<listitem>
<simpara>
"O": shows the value of the "Automatically open slot if speed is below xx KiB/s" setting, if non-zero
</simpara>
</listitem>
<listitem>
<simpara>
The brackets <emphasis>&lt;</emphasis> and <emphasis>&gt;</emphasis> shall be taken literally.
</simpara>
</listitem>
</itemizedlist>
<simpara>Note that the IPv4/IPv6 extensions add additional data to the M. See the IPv4/IPv6 extensions for further information.</simpara>
<simpara>Example:
Note that the example uses <emphasis>0x31</emphasis> for signaling the flag as <emphasis>Normal</emphasis>, for ease of display.</simpara>
<informalexample>
<simpara>$MyINFO $ALL johndoe &lt;++ V:0.673,M:P,H:0/1/0,S:2&gt;$ $LAN(T3)0x31$<ulink url="mailto:example@example.com">example@example.com</ulink>$1234$\|</simpara>
</informalexample>
</section>
</section>
<section id="_getinfo">
<title>$GetINFO</title>
<literallayout class="monospaced">$GetINFO &lt;other_nick&gt; &lt;nick&gt;|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client</simpara>
<simpara>Request (general) client information.</simpara>
<simpara>&lt;nick&gt; is this sending client&#8217;s nick.</simpara>
<simpara>&lt;other_nick&gt; is the nick of the user that <emphasis>&lt;nick&gt;</emphasis> wants to know about. The server must respond with exactly the $MyINFO command sent by <emphasis>&lt;other_nick&gt;</emphasis> to the hub.</simpara>
<simpara>Example:</simpara>
<informalexample>
<simpara>$GetINFO peter john|</simpara>
</informalexample>
</section>
<section id="_hello">
<title>$Hello</title>
<literallayout class="monospaced">$Hello user|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>When a new user logs in, the hub will send this command to the new user to inform them that they have been accepted for hub entry.</simpara>
</section>
<section id="_version">
<title>$Version</title>
<literallayout class="monospaced">$Version version|</literallayout>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>Sent by clients to the hub after $Hello is received to denote the version used for the client. This command is nowadays not used to denote the client&#8217;s version but was used frequently by the original Neo-Modus Direct Connect (NMDC) client. The last version of the Neo-Modus client was 1.0091 and is what is commonly used by current clients. The default system locale is used, which means the period may be a comma etc.</simpara>
<simpara>Version is 1.0091 by default.</simpara>
</section>
<section id="_hubname">
<title>$HubName</title>
<literallayout class="monospaced">$HubName name|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>The name of the hub that should be displayed by clients to users. The name is sometimes interpreted as the "topic" (current discussion topic or general theme of the hub), in cases where $HubTopic does not exist. The hub could send different names to different users, as well as the ability for multiple hubs (that are inherently separated) to have the same name, so the client should not use the hub name as a unique identifier.</simpara>
</section>
<section id="_getnicklist">
<title>$GetNickList</title>
<literallayout class="monospaced">$GetNickList|</literallayout>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>Request that the hub send the nick names of all users that are connected.</simpara>
</section>
<section id="_nicklist">
<title>$NickList</title>
<literallayout class="monospaced">$NickList nick$$nick2$$nick3[...]|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Providing the full listing of users, including bots and operators. List is separated by "$$".</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$NickList john$$peter$$richard$$marie$$sarah|</literallayout>
</informalexample>
</section>
<section id="_oplist">
<title>$OpList</title>
<literallayout class="monospaced">$OpList nick$$nick2$$nick3[...]|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Providing the full listing of operators. This is a subset of the users provided in $NickList. List is separated by "$$".</simpara>
<simpara>The following should be sent if there are no operators online:</simpara>
<literallayout class="monospaced">$OpList|</literallayout>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$OpList john$$peter|</literallayout>
</informalexample>
</section>
<section id="_kick">
<title>$Kick</title>
<literallayout class="monospaced">$Kick victim|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client</simpara>
<simpara>Requests that the hub kicks a user (terminates the connection to the user). The hub will validate that the issuing user actually have permission to kick the other user. The message does not specify a reason to the kick; hubs may decide instead to send a default "you have been kicked" message. Time frame (of a potential ban) does not exist in the protocol, as it is decided by the hub&#8217;s configuration. It is up to the hub to decide the course of action if the user is not allowed to issue the kick, but the majority of implementations will simply ignore the message or send a message back ("you are not allowed to issue the command"). Many clients that issue the Kick command will precede the message with a message directed (either normal main chat or with $To) to the offended user with the reason for the kick.</simpara>
</section>
<section id="_close">
<title>$Close</title>
<literallayout class="monospaced">$Close victim|</literallayout>
<simpara>Contexts: Client &#8594; Hub &#8594; Client</simpara>
<simpara>Requests that the hub kicks a user (terminates the connection to the user), but no message will be sent to the victim client. All other information is similar to $Kick.</simpara>
</section>
<section id="_opforcemove">
<title>$OpForceMove</title>
<literallayout class="monospaced">$OpForceMove $Who:victim$Where:address$Msg:reason|</literallayout>
<simpara>A request made by privileged users to redirect a user from the hub. The message should be sent to the offending user in a main chat message or in a $To message.</simpara>
<simpara>victim is nick name of the victim.</simpara>
<simpara>address is the address to redirect to, abiding to the specified rules for URIs.</simpara>
<simpara>reason is why the redirect was issued.</simpara>
<simpara>Example:</simpara>
<informalexample>
<simpara>$OpForceMove $Who:richard$Where:example.com:411$Msg:I think you&#8217;ll like this hub better|</simpara>
</informalexample>
</section>
<section id="_forcemove">
<title>$ForceMove</title>
<literallayout class="monospaced">$ForceMove address|</literallayout>
<simpara>Informs the user that it should close its connection and instead connect to the address specified. Many implementations will send $ForceMove followed by a main chat message or a $To message.</simpara>
<simpara>Example:</simpara>
<informalexample>
<simpara>$ForceMove example.com:411|
$To:richard From: OpNick $&lt;peter&gt; You are being re-directed to example.com:411 because: I think you&#8217;ll like thus hub better.|</simpara>
</informalexample>
</section>
<section id="_quit">
<title>$Quit</title>
<literallayout class="monospaced">$Quit nick|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Inform users in a hub that <emphasis>nick</emphasis> has disconnected from the hub. If a user desire to disconnect from a hub, the client should simply terminate the connection and not send $Quit.</simpara>
<simpara>Example:</simpara>
<informalexample>
<simpara>$Quit peter|</simpara>
</informalexample>
</section>
<section id="_lock">
<title>$Lock</title>
<literallayout class="monospaced">$Lock lock Pk=pk|</literallayout>
<simpara>Contexts: Hub &#8594; Client, Client &#8594; Client</simpara>
<simpara>This is a mechanism to request 'certification' for verification. The lock is a command that added by NMDC to keep other clients (such as DC++) from being able to use NMDC hubs. The lock require a response (given in a $Key) that needs to be calculated, as per the lock&#8217;s data. Hubs are not required to check the validity of the response, but must still send it.</simpara>
<simpara>Note this command, and its use, are used for all connections.</simpara>
<simpara>This command should be the first to be sent in a client to hub connection. This command should be sent after both have used $MyNick in a client to client connection. Both clients (in a client to client connection) should send $Lock.</simpara>
<simpara>The lock data is a sequence of random characters, excluding space (' '), dollar sign ('$') and a pipe ('|').</simpara>
<simpara>Pk was originally intended for use with SSL/TLS keys for secure connections, but is not used by any implementation today. Some implementations send their name and version in this field.</simpara>
<simpara>Implementation note: In NMDC hub;</simpara>
<itemizedlist>
<listitem>
<simpara>
Lock&#8217;s length varied from 46 to 115 characters
</simpara>
</listitem>
<listitem>
<simpara>
Pk&#8217;s length was static with 16 characters.
</simpara>
</listitem>
<listitem>
<simpara>
Lock&#8217;s characters varied from ASCII code point 37 to ASCII code point 122.
</simpara>
</listitem>
</itemizedlist>
<simpara>Example:
See $Supports for the use of EXTENDED.</simpara>
<informalexample>
<simpara>$Lock EXTENDEDPROTOCOLABCABCABCABCABCABC Pk=DCPLUSPLUS0.706ABCABC|</simpara>
<simpara>$Lock EXTENDEDPROTOCOL_verlihub Pk=version0.9.8e-r2|</simpara>
</informalexample>
</section>
<section id="_key">
<title>$Key</title>
<literallayout class="monospaced">$Key key|</literallayout>
<simpara>Contexts: Client &#8594; Hub, Client &#8594; Client</simpara>
<simpara>The key is given as a response for a $Lock command, as calculated by the following algorithm.</simpara>
<simpara>The key has exactly as many characters as the lock. Except for the first, each key character is computed from the corresponding lock character and the one before it. If the first character has index 0 and the lock has a length of len then:</simpara>
<simpara>for (i = 1; i &lt; len; i++)
{
key[i] = lock[i] xor lock[i-1];
}</simpara>
<simpara>The first key character is calculated from the first lock character and the last two lock characters:</simpara>
<simpara>key[0] = lock[0] xor lock[len-1] xor lock[len-2] xor 5</simpara>
<simpara>Next, every character in the key must be nibble-swapped:</simpara>
<simpara>for (i = 0; i &lt; len; i++)
{
key[i] = ((key[i]&lt;&lt;4) &amp; 240) | ((key[i]&gt;&gt;4) &amp; 15);
}</simpara>
<simpara>Finally, the characters with the decimal ASCII values of 0, 5, 36, 96, 124, and 126 cannot be sent to the server. Each character with this value must be substituted with the string /%DCN000%/, /%DCN005%/, /%DCN036%/, /%DCN096%/, /%DCN124%/, or /%DCN126%/, respectively. The resulting string is the key to be sent to the server.</simpara>
<simpara>If your programming language of choice doesn&#8217;t have xor or shift operations on characters, convert them to integers. If it doesn&#8217;t have a bit shift at all, then x « y = x*(2y) and x » y = x/(2y) for all integers x and y (** is the exponent operation or “to the power of”). Be sure to use unsigned values everywhere and do not do sign extension. Shift operations always lose the high or low bit (they are not roll operations!). The &amp; (and) and | (or) operations are all logical, not boolean (eg. 6 &amp; 13 = 4, not 1).</simpara>
<simpara>When the hub connects to the hublist, it must undergo a similar Lock/Key negotiation. The &lt;key&gt; calculation is the same, but the special number 5 in the second step is replaced with the following value is not computed from the hub&#8217;s listening port, but rather the random outgoing port that the Winsock selects. localport: 1) &amp; 255</simpara>
<simpara>Note that the data sent should be in its raw form.</simpara>
<simpara>Example:
Note that this (and every other) example uses '011010110110010101111001' as key, but it should be interpreted as a binary value.</simpara>
<informalexample>
<simpara>$Key 011010110110010101111001|</simpara>
</informalexample>
</section>
<section id="_multiconnecttome">
<title>$MultiConnectToMe</title>
<literallayout class="monospaced">$MultiConnectToMe remote_nick sender_ip:sender_port</literallayout>
<simpara>This command is a client side command to take advantage of hub linking feature in the NeoModus Direct Connect Hub software. When a local client sends $MultiConnectToMe to the hub, it is forwarded on to every hub which is linked to by UDP, as in the $Search hub&lt;&#8594;hub protocol command.</simpara>
<simpara>This command is used in conjunction with $MultiSearch.</simpara>
<simpara>This support was problematic, as the NeoModus Direct Connect Hub did not provide a way to indicate that it was part of a link, and further did not provide the ability to broadcast joins and parts of remote users. Some implementations would send $MultiConnectToMe commands even when the remote user was offline.</simpara>
<simpara>Example:</simpara>
<informalexample>
<simpara>$MultiConnectToMe peter 192.168.0.138:19346</simpara>
</informalexample>
</section>
<section id="_multisearch">
<title>$MultiSearch</title>
<literallayout class="monospaced">$MultiSearch ip:port search_string|</literallayout>
<simpara>This command is a client side command to take advantage of hub linking feature in the NeoModus Direct Connect Hub software. When a local client sends $MultiSearch to the hub, it is forwarded on to every hub which is linked to by UDP, as in the $Search hub&lt;&#8594;hub protocol command.</simpara>
<simpara>This command is used in conjunction with $MultiConnectToMe.</simpara>
<simpara>For syntax on the parameters, see $Search.</simpara>
</section>
</section>
<section id="_extensions_commands">
<title>Extensions (commands)</title>
<section id="_botlist">
<title>$BotList</title>
<literallayout class="monospaced">$BotList nick$$nick2$$nick3[...]|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Providing the full listing of bots. This is a subset of the users provided in $NickList. List is separated by "$$".</simpara>
<simpara>Add BotList to the $Supports to indicate support for this.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$BotList marie|</literallayout>
</informalexample>
</section>
<section id="_adcget">
<title>$ADCGET</title>
<literallayout class="monospaced">$ADCGET type identifier start_pos bytes flag0...flagN|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This is a port of the ADC approach of signifying the request. &lt;start_pos&gt; counts 0 as the first byte. &lt;bytes&gt; may be set to -1 to indicate that the sending client should fill it in with the number of bytes needed to complete the file from &lt;start_pos&gt;. &lt;type&gt; is a [a-zA-Z0-9]+ string that specifies the namespace for identifier and clients should recognize the type "file".</simpara>
<simpara>"file" transfers transfer the file data in binary, starting at &lt;start_pos&gt; and sending &lt;bytes&gt; bytes. Identifying must come from the namespace of the current hash.</simpara>
<simpara>flag0&#8230;flagN is a reference to the fields in ADC&#8217;s GET command. Fields available for GET can also be added here in the same way as in ADC.</simpara>
<simpara>Add ADCGet to the $Supports to indicate support for this. Support for ADCGet imply support for both $ADCGET and $ADCSND.</simpara>
</section>
<section id="_adcsnd">
<title>$ADCSND</title>
<literallayout class="monospaced">$ADCSND type identifier start_pos bytes|</literallayout>
<simpara>Contexts: Client &#8594; Client</simpara>
<simpara>This is used as a way to specify that the file should be sent. The uploader should proceed to stream the amount of bytes requested previously.</simpara>
<simpara>This is a port of the ADC approach of signifying sending. The parameters correspond to the ADCGET parameters except that if &lt;bytes&gt; equals -1 it must be replaced by the number of bytes needed to complete the file starting at &lt;start_pos&gt;.</simpara>
<simpara>Add ADCGet to the $Supports to indicate support for this. Support for ADCGet imply support for both $ADCGET and $ADCSND.</simpara>
</section>
<section id="_userip">
<title>$UserIP</title>
<literallayout class="monospaced">$UserIP nick|
$UserIP nick ip|</literallayout>
<simpara>Contexts: Client &#8594; Hub, Hub &#8594; Client</simpara>
<simpara>A client may request IP address information about clients. The hub will respond with a command with the same name, but with different parameter data.</simpara>
<simpara>Example:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Client </entry>
<entry align="left" valign="top">Server</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>$UserIP johndoe|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$UserIP johndoe 192.168.1.2|</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="_userip_extension">
<title>$UserIP extension</title>
<literallayout class="monospaced">$UserIP nick1 IP1$$nick2 IP2[...]|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>This is similar to the other $UserIP command, except that there is no request. The hub will, if the client signals support for UserIP2, send all users upon login.</simpara>
<simpara>The list consist of each user and their IP, including the connecting client. The hub should send each new client&#8217;s IP when they login.</simpara>
<simpara>Note that $$ is used as delimiter.</simpara>
<simpara>Add UserIP2 to the $Supports to indicate support for this.</simpara>
<simpara>Example:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Client </entry>
<entry align="left" valign="top">Server</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$UserIP johndoe 192.168.1.2$$janedoe 192.168.1.3|</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="_botinfo">
<title>$BotINFO</title>
<literallayout class="monospaced">$BotINFO description|</literallayout>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>Bot description can be any string, usually information regarding, and address of, the hublist.</simpara>
<simpara>Add BotINFO to the $Supports to indicate support for this.</simpara>
</section>
<section id="_hubinfo">
<title>$HubINFO</title>
<literallayout class="monospaced">$HubINFO name$address:port$description$max_users$min_share$min_slots$max_hubs$hub_type$hubowner_login|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>Hub name, address and description are the items which will be shown in the hublist (some hubs have multiple addresses and this helps to get primary address). Description changes often on some hubs so this helps with updating it.</simpara>
<simpara>Max users, min share, min slots and maximum number of open hubs for the client helps users to find suitable hubs.</simpara>
<simpara>Hub type gives information about the hub software and script which gave the information.</simpara>
<simpara>Hubowner login is meant to help hubowners to edit information about their hub directly from the hublist portal It is usually an email address where the account/password information should be sent.</simpara>
<simpara>If the hub address is 127.0.0.1, the Hublist.org pinger will remove the hub from its database. (Or is supposed to.)</simpara>
<simpara>Add HubINFO to the $Supports to indicate support for this.</simpara>
</section>
<section id="_hubtopic">
<title>$HubTopic</title>
<literallayout class="monospaced">$HubTopic topic|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>The hub topic, be it current discussion topic or general theme of the hub, which allow users to quickly see what the discussion and file sharing themes are. Hub pingers frequently use this message for hub related information.</simpara>
<simpara>Add HubTopic to the $Supports to indicate support for this.</simpara>
</section>
<section id="_supports">
<title>$Supports</title>
<literallayout class="monospaced">$Supports extension1 extension2 [...]|
$Supports extension1 extension2 [...] |</literallayout>
<simpara>Contexts: Client &#8594; Hub, Hub &#8594; Client, Client &#8594; Client</simpara>
<simpara>This command is used to negotiate and notify about protocol extensions.</simpara>
<simpara>If a client or hub implements an extension, the $Lock command MUST start with 'EXTENDEDPROTOCOL'.</simpara>
<simpara>This command MUST be sent before $Key.</simpara>
<simpara>Implementations should only send extension specific messages if the other party has signaled support for it.</simpara>
<simpara>There must be at least 1 (one) supported extension.</simpara>
<simpara>For client extensions, the extension name should be the same as the command name.</simpara>
<simpara>Note that DC++ 0.XXX added a space after the last extension. I.e., the first form is the original implementation of $Supports.</simpara>
<simpara>Example:
The following example signals support for 7 (seven) different extensions. See corresponding command/extension for description.</simpara>
<informalexample>
<simpara>$Supports UserCommand NoGetINFO NoHello UserIP2 TTHSearch ZPipe0 GetZBlock|</simpara>
</informalexample>
</section>
<section id="_capabilities">
<title>Capabilities</title>
<literallayout class="monospaced">$Capabilities [unknown]|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>This command is used to negotiate and notify about protocol extensions, similar to the more popular $Supports. Its content is unknown as of date.</simpara>
</section>
<section id="_in">
<title>IN</title>
<literallayout class="monospaced">$IN nick$data[$data]|</literallayout>
<simpara>Contexts: Client &#8594; Hub, Hub &#8594; Client</simpara>
<simpara>This command is designed to replace the static $MyINFO. This command consist of separate smaller parts which all have a 1-byte identifier and are separated by a dollar sign (<emphasis>$</emphasis>).</simpara>
<simpara>If a client wishes to remove a part of its $IN (say for example its description), it must send this parts identifier immediatly followed by the dollar sign ($), indicating it is empty.</simpara>
<simpara>The order in which parts are sent is free to choose, but tag parts should be grouped together.</simpara>
<simpara>Add IN to the $Supports to indicate support for this.</simpara>
<simpara>This command deprecates $OpList and $BotList.</simpara>
<simpara>A client tag has only one identiifer indicating it is concerning the tag, but all parts of this tag also have their own 1-byte identifier. In the tag, the parts are delimited with a space (' ').</simpara>
<simpara>The data consist of two elements: identifier and its data.</simpara>
<simpara>The following table lists the identifiers:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Identifier (character code) </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>D (68)</simpara></entry>
<entry align="left" valign="top"><simpara>Description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>T (84)</simpara></entry>
<entry align="left" valign="top"><simpara>Tag</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>C (67)</simpara></entry>
<entry align="left" valign="top"><simpara>Connection</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>F (70)</simpara></entry>
<entry align="left" valign="top"><simpara>Status flag</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E (69)</simpara></entry>
<entry align="left" valign="top"><simpara>E-mail address</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>S (83)</simpara></entry>
<entry align="left" valign="top"><simpara>Share size in bytes</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Examples:</simpara>
<informalexample>
<simpara>$IN john$Dmy_new_description|
$IN john$S1024|
$IN john$S1024$$Dmy_new_description|</simpara>
</informalexample>
<simpara>The tag has the following identifiers in the data:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Identifier (character code) </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>c (99)</simpara></entry>
<entry align="left" valign="top"><simpara>Client</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>v (118)</simpara></entry>
<entry align="left" valign="top"><simpara>Version</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>m (109)</simpara></entry>
<entry align="left" valign="top"><simpara>Mode</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>h (104)</simpara></entry>
<entry align="left" valign="top"><simpara>Hub count, x/y/z (where x is the number of hubs as a normal user, y as the number of hubs as registered and z as the number of hubs as operator)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>s (115)</simpara></entry>
<entry align="left" valign="top"><simpara>Slots</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>f (102)</simpara></entry>
<entry align="left" valign="top"><simpara>Free slots</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>l (108)</simpara></entry>
<entry align="left" valign="top"><simpara>Bandwidth limit (L: and B: in $MyINFO)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>o (111)</simpara></entry>
<entry align="left" valign="top"><simpara>O: in $MyINFO</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>r (114)</simpara></entry>
<entry align="left" valign="top"><simpara>R: in $MyINFO</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Tag identifiers are separated by a space (' ').</simpara>
<simpara>Examples:</simpara>
<informalexample>
<simpara>$IN john$Ts3|
$IN john$Tc++ v0.666|</simpara>
</informalexample>
<simpara>The status is a 32-bit integers where the bits are according to the following table:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Bit </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Default value</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>User is away</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>USer is server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>User is fireball</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>User is OP</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>Client is a bot</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>7</simpara></entry>
<entry align="left" valign="top"><simpara>Client is in DND mode</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>8</simpara></entry>
<entry align="left" valign="top"><simpara>Client support encryption</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>9</simpara></entry>
<entry align="left" valign="top"><simpara>Client supports partial search</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Bit 5 and Bit 6 of the 32-bit status flag are used to indicate wether a user is an OP or wether the $IN string send by the hubsoft belongs to a bot. These values are read-only and should never be changed by a client. The hubsoft must disconnect for this. If a client connects and has successfully logged in with the correct password, the hubsoft will set bit 5 of the status flag and sends this part to all connected users, including the newly connected OP. The connecting client must save the status flag it received from the hub and use it when updating status such as away and fireball. However, as said, it is not allowed to set or reset bit 5 and bit 6 of the status flag.</simpara>
<simpara>Bit 7 of the 32-bit status flag indicates if the client is in DND-mode (Do-Not-Disturb). Unlike Away mode, this mode will prevent the client to receive any pm&#8217;s. Clients are responsible themselves for setting/resetting this bit. Once this bit is set, and the hub receives a $To: string for a client in DND-mode, the hub must ignore the $To and reply to the sender with a message that the receiver is in DND-Mode. A client having this bit set, should automatically reset this bit when sending a pm itself. Ideally, newer clients supporting IN, may prevent themselves from sending $To strings to other clients having this bit set. The hub will always have the last the say in forwarding a PM or not. $To strings generated by the hubsoft to the client are not included in this and will be send regardlessly of status ( i.e. messages from bots ).</simpara>
</section>
<section id="_mcto">
<title>MCTo</title>
<literallayout class="monospaced">$MCTo: target $sender message|</literallayout>
<simpara>Contexts: Client &#8594; Hub, Hub &#8594; Client</simpara>
<simpara>This is a private-message to a single user that should be displayed as an ordinary chat-message.</simpara>
<simpara>Add MCTo to the $Supports to indicate support for this.</simpara>
<simpara>target is the client nick that should receive the message.</simpara>
<simpara>sender is the client nick that is the sender</simpara>
<simpara>message is the actual message.</simpara>
<simpara>Examples:</simpara>
<informalexample>
<literallayout class="monospaced">$MCTo john $peter Cats are cute|
$MCTo peter $john I like dogs|</literallayout>
</informalexample>
</section>
<section id="_nickchange">
<title>$NickChange</title>
<literallayout class="monospaced">$NickChange old_nick new_nick|</literallayout>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>This allow a client to change the nick without logging out and logging back in.</simpara>
<simpara>old_nick is the old user nick.</simpara>
<simpara>new_nick is the new user nick.</simpara>
<simpara>Add NickChange to the $Supports to indicate support for this.</simpara>
<simpara>The client will have to update its own $MyINFO string and user list.</simpara>
<simpara>The hub will will send $ClientNick to the client to validate that the change is done. To all other users, a $Quit old_nick will be sent and a $MyINFO $ALL of the user with the new nick.</simpara>
<simpara>If the user is an operator, $OpList will be updated appropriately as well.</simpara>
</section>
<section id="_clientnick">
<title>$ClientNick</title>
<literallayout class="monospaced">$ClientNick new_nick|</literallayout>
<simpara>This validates that the hub has acknowledged the change of nick during runtime that was initiated by $NickChange.</simpara>
<simpara>new_nick is the new user nick.</simpara>
<simpara>Add ClientNick to the $Supports to indicate support for this.</simpara>
</section>
<section id="_featurednetworks">
<title>FeaturedNetworks</title>
<simpara>$FeaturedNetworks is a protocol extension of the APN MultiHubChatsystem to identify the different hubs and other entry points (IRC, Telnet) etc. It was primarily created to aid APN developers and to allow a better integration of multi hub chat systems.</simpara>
<simpara>Messages coming through the chat network are prefixed with an unique network node (entry point) identifier, normally three characters long. The central point of the chat network is a single hub that collects chat messages from one entry point and sends them back all other entry points.</simpara>
<simpara>Add FeaturedNetworks to the $Supports to indicate support for this.</simpara>
<simpara>Syntax</simpara>
<simpara>An APN MultiHubChat message normally has this format:</simpara>
<simpara>&lt;(YYY)XXXXX&gt; MMMMMMM|Where YYY is the entry point prefix, XXXXX is the username and MMMMMMM is the message.</simpara>
<simpara>To allow the different entry point handlers to identify which messages are coming from other multi hub chat entry points, there is a command send by the hub after login called FeaturedNetworks:</simpara>
<simpara>$FeaturedNetworks YYYYYY$YYY|YYY stands for one entry point to the chat network. In the biggest currently running instance of the APN MultiHubChat system, five or more different prefixes are used.</simpara>
<section id="_implementation">
<title>Implementation</title>
<simpara>If implemented, this command could be sent from one of the entry point hubs aswell to aid the client in distinguishing user set prefixes ([BBB], [psv], (FUG) etc..) from network prefixes, and can be used by bots to detect prefix abuse.</simpara>
<simpara>The prefixes are to be defined by the network administrator. In the biggest running instance of the network however, the following prefixes are used by several MHC plugins for the different entry points:</simpara>
<simpara>• APx - Hub x (DC, where x is Â¹,Â³ or Â²).</simpara>
<simpara>• APt - Telnet Access (Telnet Chat Plugin)</simpara>
<simpara>• IRC - IRC Access (IRC plugin)</simpara>
<simpara>• APs - Shoutcast (Shoutcast Announcer Plugin)</simpara>
<simpara>$FeaturedNetworks can be implemented by virtually any hub by either using the MHC bot or by injecting it into the server ? client stream using a textfile (like a MOTD).</simpara>
</section>
</section>
<section id="_z">
<title>$Z</title>
<literallayout class="monospaced">$Z blob|</literallayout>
<simpara>Contexts: Hub &#8594; Client</simpara>
<simpara>This command&#8217;s intention is to compress (with ZLib) data to decrease bandwidth use. The blob uncompressed is one or more commands, e.g. a $Search followed by a $MyINFO.</simpara>
<simpara>Add ZLine to the $Supports to indicate support for this.</simpara>
<simpara>The command adds an escaping sequence:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Character </entry>
<entry align="left" valign="top">Escape</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>\</simpara></entry>
<entry align="left" valign="top"><simpara>\\</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>|</simpara></entry>
<entry align="left" valign="top"><simpara>\P</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="_zon">
<title>$ZOn</title>
<literallayout class="monospaced">$ZOn blob|</literallayout>
<simpara>This command&#8217;s intention is to compress (with ZLib) data to decrease bandwidth use. The blob uncompressed is one or more commands, e.g. a $Search followed by a $MyINFO.</simpara>
<simpara>Compression algorithm shall be LZ77.</simpara>
<simpara>The end of the block is an EOF.</simpara>
<simpara>Add ZPipe0 to the $Supports to indicate support for this.</simpara>
<simpara>The command adds no escaping.</simpara>
</section>
<section id="_getzblock">
<title>$GetZBlock</title>
<literallayout class="monospaced">$UGetBlock start bytes filename|</literallayout>
<simpara>start is the 0-based (yes, 0-based, not like get that&#8217;s 1-based) starting index of the file used</simpara>
<simpara>bytes is the number of bytes to send</simpara>
<simpara>filename is the filename.</simpara>
<simpara>The other client then responds "$Sending &lt;bytes&gt;|&lt;compressed data&gt;", if the sending is ok or "$Failed &lt;errordescription&gt;|" if it isn&#8217;t.</simpara>
<simpara>If everything&#8217;s ok, the data is sent until the whole uncompressed length has been sent. <emphasis>bytes</emphasis> specifies how many uncompressed bytes will be sent, not compressed, as the sending client doesn&#8217;t know how well the file will compress. $Sending is  needed to be able to distinguish the failure command from file data. Only  one roundtrip is done for each block though, minimizing the need for maintaining states.</simpara>
<simpara>Compression: Compression is done using ZLib (v 1.1.4 in DC++ 0.21&#8217;s case),
using dynamic compression level. The compression level can of course be
changed by the implementator to reduce CPU usage, or even just store
compression in the case of non-compressible files, which then works as
adler32 check of the transferred data.</simpara>
<simpara>Support of $GetZBlock also implies support for $UGetZBlock.</simpara>
</section>
<section id="_ugetblock">
<title>$UGetBlock</title>
<literallayout class="monospaced">$UGetBlock start bytes filename|</literallayout>
<simpara>This is the same command as $GetZBlock except this command is uncompressed and the filename is UTF-8 encoded.</simpara>
<simpara>The filename is encoded as UTF-8, which allows filenames to use characters that are not in the system&#8217;s encoding. $UGetBlock must be implemented if XmlBZList is advertised.</simpara>
</section>
<section id="_ugetzblock">
<title>$UGetZBlock</title>
<simpara>This is the same as $UGetBlock except that the stream is compressed.</simpara>
</section>
<section id="_gettestzblock">
<title>$GetTestZBlock</title>
<simpara>This command is deprecated and was a test command during the development of $GetZBlock. Implementations should not use this command.</simpara>
</section>
<section id="_sending">
<title>$Sending</title>
<literallayout class="monospaced">$Sending diff|</literallayout>
<simpara>Diff is the difference between the end byte and start byte. If the requested bytes was -1 then diff should be omitted.</simpara>
<simpara>This is sent as a response to $GetZBlock, $UGetBlock and $UGetZBlock.</simpara>
<simpara>The start and end byte are 0-based; the first byte of a file is assumed to be the byte number 0.</simpara>
</section>
<section id="_clientid">
<title>$ClientID</title>
<simpara>Add ClientID to the $Supports to indicate support for this.</simpara>
</section>
<section id="_getcid">
<title>$GetCID</title>
<simpara>Add ClientID to the $Supports to indicate support for this.</simpara>
</section>
<section id="_usercommand">
<title>$UserCommand</title>
<literallayout class="monospaced">$UserCommand type context details|</literallayout>
<simpara>Add UserCommand to the $Supports to indicate support for this.</simpara>
<simpara>type is a positive integer describing the kind of command:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Value </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>Separator</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Raw</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>Raw nick limited (same as raw with the exception that it should only be used once per %[nick])</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>255</simpara></entry>
<entry align="left" valign="top"><simpara>Erase all previously sent commands</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>context is a integer that controls which contexts the menus will be shown. The value is derived by logical OR of the following values;</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Value </entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Hub context</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>User context</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>Search context</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>8</simpara></entry>
<entry align="left" valign="top"><simpara>File list</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>details differ depending on the type.</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Type </entry>
<entry align="left" valign="top">Detail information</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>0 and 255</simpara></entry>
<entry align="left" valign="top"><simpara>Leave this field empty</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1 and 2</simpara></entry>
<entry align="left" valign="top"><simpara>Detail should be <emphasis>title$command</emphasis>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section id="_escaping">
<title>Escaping</title>
<simpara>Escaping of dollar and pipe is necessary for the &lt;command&gt; in <emphasis>'raw</emphasis>' mode. The DC++ escape sequence will be used. i.e. &#124; for pipe, &#36; for dollar and &amp; for the ampersand. Escaping is used for all fields before they are sent to the hub / shown to the user. As with all NMDC commands, they must be terminated by the pipe character</simpara>
</section>
<section id="_details_separator">
<title>Details: Separator</title>
<literallayout class="monospaced">$UserCommand 0 &lt;context&gt;|</literallayout>
<simpara>Will add a menu separator (vertical bar) to the specified contexts (&lt;context&gt;). It is legal to add text (after the space) before the pipe, but it won''t be used (yet).</simpara>
<simpara>====== Details: Raw
 $UserCommand 1 &lt;context&gt; &lt;title&gt;$&lt;raw&gt;|</simpara>
<simpara>Will add a raw menu item with title &lt;title&gt; with command &lt;raw&gt;. This command must end with a &#124;, if not it should be discarded. The raw command may be used to specify multiple commands to be sent to the hub.</simpara>
</section>
<section id="_details_raw_nick_limited">
<title>Details: Raw nick limited</title>
<literallayout class="monospaced">$UserCommand 2 &lt;context&gt; &lt;title&gt;$&lt;raw&gt;|</literallayout>
<simpara>Is exactly the same as Raw, except that the command should only be run once per %[nick]. This is to prevent the client from sending out more than one message that disconnects someone. Generally, this is only useful in the User-File context (e.g. viewing Search Results) where it is possible to select one user multiple times.</simpara>
</section>
<section id="_details_erase">
<title>Details: Erase</title>
<literallayout class="monospaced">$UserCommand 255 &lt;context&gt;|</literallayout>
<simpara>Will erase all commands that the hub has sent previously. This is for hubs/scripts that allow for updates while running. The erase all is intentional, keeping it simple. Note that contexts must still be used, and that erasing will remove all commands that match any of those ORed contexts (i.e. 7 will remove commands previously sent with any context of 1 through 7) but only from that context</simpara>
<simpara>Examples:</simpara>
<informalexample>
<simpara>$UserCommand 2 6 Kick$&#36;To: %[nick] From: %[mynick] &#36;&lt;%[mynick]&gt; You are being kicked====|&#36;Kick %[nick]&#124;|
$UserCommand 255 1|</simpara>
</informalexample>
</section>
</section>
</section>
<section id="_extensions_features">
<title>Extensions (features)</title>
<section id="_nohello">
<title>NoHello</title>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>This indicates that the client doesn&#8217;t need either $Hello or $NickList to be sent to it when connecting to a hub. To populate its user list, a $MyINFO for each user is enough. $Hello is still accepted, for adding bots to the user list. DC++ still sends a $GetNickList to indicate that it is interested in the user list. During login, hubs must still send $Hello after $ValidateNick to indicate that the nick was accepted.</simpara>
<simpara>Add NoHello to the $Supports to indicate support for this.</simpara>
</section>
<section id="_chatonly">
<title>ChatOnly</title>
<simpara>Contexts: Client &#8594; Hub</simpara>
<simpara>This indicates that the client only support chat capabilities to allow the client to bypass hub rules (that relate to file sharing). The client should be disconnected if it sends a $Search, $ConnectoMe or $RevConnect.</simpara>
<simpara>Add ChatOnly to the $Supports to indicate support for this.</simpara>
</section>
<section id="_quicklist">
<title>QuickList</title>
<simpara>The terms NDC and NHUB are used to denote a client or hub not featuring QuickList and QDC and QHUB for those that do. The term DC is used when the type is not yet established or of no importance. EACH and ALL signals that a message is sent N times, one message for each connected user. Also note that the terms IF, MAY, SHOULD and MUST, have the same meaning as in the internet RFC specs.
Walkthrough
Connecting</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>A DC connects to QHUB and does nothing</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB sends $Lock which starts with EXTENDEDPROTOCOL</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB also sends $HubName</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>A DC must send $Key</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>A DC may also send $Supports QuickList| to signal in is in fact a QDC</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB responds with $Supports QuickList|</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Identification</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>A QDC may but should not send $Version</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>A QDC must send $MyINFO</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Authentication</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>QHUB may send $GetPass</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QDC responds with $MyPass</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB may send $BadPass and disconnect</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB may send $ValidateDenide and disconnect</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Acceptance</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>QHUB may send $LogedIn to signal that H: should not be incremented</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB sends all clients MyINFO to the QDC</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB sends $OpList to the QDC</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB may send $Hello to all clients but should send it to non QDC only</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>QHUB sends $MyINFO to all QDC clients</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Explanation
Connecting
This part has been through some changes. There was an argument of having the client start with $Supports and then having the hub respond to that. Having the client start with $Supports as a response to EXTENDEDPROTOCOL is in a sense much cleaner.</simpara>
<simpara>•   It has been found that $HubName can be sent pretty much at any time. Typically done in conjunction with $Lock.</simpara>
<simpara>•   $Supports are in the same format as in the client protocol; <emphasis>'$Supports &lt;feat1&gt; &lt;feat2&gt; &lt;feat3&gt;&#124;</emphasis>'</simpara>
<simpara>Identification</simpara>
<simpara>•   sending $MyPass early has been removed from the spec.</simpara>
<simpara>Authentication</simpara>
<simpara>•   As previously mentioned $GetPass is only sent if the user has an account and the $MyPass was not sent in the identification process. $BadPass or $ValidateDenide is sent when proper as usual.</simpara>
<simpara>Acceptance</simpara>
<simpara>From testing it has been found that $Hello and $MyINFO can be sent together without having to wait for a $GetINFO.</simpara>
<simpara>•   Let the hub decide if the account should be treated as a VIP, i.e. not increment H: in the tag, hence it is not mandatory for accounts. A QDC should only respond to this message for account logins only.</simpara>
<simpara>•   $OpList was missing.</simpara>
<simpara>Commands Sent</simpara>
<simpara>Connecting
•   $Lock
•   $HubName
•   $Supports</simpara>
<simpara>Identification</simpara>
<simpara>Authentication
•   $GetPass
•   $BadPass
•   $ValidateDenide</simpara>
<simpara>Acceptance
•   $LogedIn
•   $MyINFO
•   $MyINFO stream</simpara>
<simpara>Connected
•   $To
•   $Search
•   $SR
•   $ConnectToMe
•   $RevConnectToMe
•   $ForceMove</simpara>
<simpara>Commands Accepted</simpara>
<simpara>Messages that a QHUB listens to in each state, QHUB ignores otherwise;</simpara>
<simpara>Connecting
•   $Key
•   $Supports</simpara>
<simpara>Identification
•   $Version
•   $MyINFO</simpara>
<simpara>Authentication
•   $MyPass</simpara>
<simpara>Acceptance</simpara>
<simpara>Connected
•   $GetNickList
•   $MyINFO
•   $To
•   $Search
•   $SR
•   $ConnectToMe
•   $RevConnectToMe
•   $Kick
•   $OpForceMove</simpara>
<simpara>Notes
• $ValidateNick deprecated and ignored
• $GetNickList only valid when connected, a QDC does not receive a $NickList, but a series of $MyINFOs directly.
• $Hello deprecated and ignored
• $GetINFO deprecated and ignored
• $MyINFO is always accepted as valid and denotes a new or updated client.</simpara>
</section>
<section id="_tthsearch">
<title>TTHSearch</title>
<simpara>This indicates that the client support searching for queued files by TTH. See $Search for details.</simpara>
<simpara>Add TTHSearch to the $Supports to indicate support for this.</simpara>
</section>
<section id="_xmlbzlist">
<title>XmlBZList</title>
<simpara>Usage: Supporing this means supporting utf-8 XML file lists with the
following general structure:</simpara>
<simpara>&lt;FileList Version="1" Generator="dc client name and version"&gt;
 &lt;Directory Name="xxx"&gt;
  &lt;Directory Name="yyy"&gt;
   &lt;File Name="zzz" Size="1"/&gt;
  &lt;/Directory&gt;
 &lt;/Directory&gt;
&lt;/FileList&gt;</simpara>
<simpara>In each directory, including the root, the name of the entity must be
case-insensitive unique in that level of the hierarchy.</simpara>
<simpara>Other fields may be added as necessary. DC++ for instance adds the
TTH attribute to each file it knows the TTH root of in base32 encoding.</simpara>
<simpara>The file list is available as "files.xml.bz2" (vs MyList.DcLst), and is
compressed using bzip2.</simpara>
<simpara>To retrieve unicode files from the file list, the client may also support
the above GetZBlock and its utf-8 derivatives.  Support for XmlBZList
implies support for $UGetBlock, so files are guaranteed to be retrievable.</simpara>
<simpara>$UGetBlock follows $UGetZBlock semantics, but without compressing
the data. The &lt;bytes&gt; parameter of $Sending specifies how many bytes
will be sent.</simpara>
<simpara>Don&#8217;t touch Version. Add your own, with a different name, if you feel
compelled.</simpara>
<simpara>Don&#8217;t trust Generator to determine features of the file list. It&#8217;s there
mainly for debugging and informative purposes.</simpara>
<simpara>Add XmlBZList to the $Supports to indicate support for this.</simpara>
<simpara>DC<literal> supported the feature XMLBZList and the commands $GetBlock, $UGetBlock and $UGetZBlock in versions 0.307 to 0.695. DC</literal> dropped support for the commands in version 0.696, whilst not removing the feature announcement. I.e., DC++ signals in the $Supports XMLBzList while it does not support the actual commands.</simpara>
</section>
<section id="_minislots">
<title>Minislots</title>
<simpara>This allows the other client to use a free slot for small files / file list.</simpara>
<simpara>$Supports is needed because the Neo-Modus DC client closes the file list browser when the connection is broken, which it becomes when the client on the other side tries to download its first file and fails because it has no real slot.</simpara>
<simpara>Add Minislots to the $Supports to indicate support for this.</simpara>
</section>
<section id="_tthl">
<title>TTHL</title>
<simpara>Supporting this means supporting the upload of tth leaf data. Instead
of transfering the file itself, the TTH data of all leaves is transferred
in binary. The size transferred back is the number of bytes of leaf data,
from this and the file size the receiving client can calculate which
level (tree depth) the sending client is offering. The receiver should
obviosly check that the received leaf data is correct by rebuilding the
tree and checking that it&#8217;s recorded root matches.</simpara>
<simpara>Add TTHL to the $Supports to indicate support for this.</simpara>
</section>
<section id="_tthf">
<title>TTHF</title>
<simpara>Supporting this means supporting file identification by TTH root. This
means supporting downloads by TTH root instead of share directory and
name. The advantage is that moved files can still be found by the
downloader without requeuing the file.</simpara>
<simpara>The extension adds a namespace "TTH" before the ADC file root. A TTHF
filename has the following syntax:</simpara>
<simpara>TTH/&lt;TTH root in base32, 192 binary bits&gt;</simpara>
<simpara>i e the TTH namespace consists of TTH root values directly under the
"TTH/" root.</simpara>
<simpara>The naming scheme is valid in all types (i e also for getting TTH leaves)</simpara>
<simpara>Add TTHF to the $Supports to indicate support for this.</simpara>
</section>
<section id="_zlig">
<title>ZLIG</title>
<simpara>Supporting this means that zlib compressed $ADCGET transfers are supported.</simpara>
<simpara>Add ZLIG to the $Supports to indicate support for this.</simpara>
</section>
<section id="_actm">
<title>ACTM</title>
<simpara>Advanced Connect To Me (ACTM) is a replacement for the $ConnectToMe and $RevConnectToMe commands.</simpara>
<simpara>Add ACTM to the $Supports to indicate support for this.</simpara>
<simpara>Implementations supporting ACTM must reply to incoming $ConnectToMe and $RevConnectToMe requests, but will themselves always send $CTM or $RCTM.</simpara>
<simpara>During requests, the clients send a 4-digit hexadecimmal ID. This ID is an incremental number that is given out for each $CTM that it sent. When a connection between two clients is established, the other party must echo back this 4-digit ID. This is done after $Supports but before $Direction. If the 4-digit ID is not any of the unhandled IDs given out by the requesting client, it must signal "$Error Invalid ID" and disconnect.</simpara>
<section id="_ctm">
<title>CTM</title>
<literallayout class="monospaced">Client 1 to hub: $CTM client2_nick$client1_port$id|
Hub forwarding to client 2: $CTM client1_ip$client1_port$id|</literallayout>
</section>
<section id="_rctm">
<title>RCTM</title>
<literallayout class="monospaced">Client 1 to hub: $RCTM client2_nick|
Hub forwarding to client 2: $RCTM client1_nick|
Client 2 to hub: $CTM client1_nick$client2_port$id|
Hub forwarding to client 1: $CTM client2_ip$client2_port$id|</literallayout>
<simpara>Example handshake:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Client party </entry>
<entry align="left" valign="top">Server party</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$MyNick peter|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Lock EXTENDEDPROTOCOLABCABCABCABCABCABC Pk=DCPLUSPLUS0.668ABCABC|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$MyNick john|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Lock EXTENDEDPROTOCOLABCABCABCABCABCABC Pk DCPLUSPLUS0.668ABCABC|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Supports MiniSlots XmlBZList ADCGet TTHL TTHF ACTM GetZBlock ZLIG|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Direction Download 17762|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Key &#8230;|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Supports MiniSlots XmlBZList ADCGet TTHL TTHF ACTM GetZBlock ZLIG|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$CTM A91E|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Direction Upload 6494|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Key &#8230;|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Get files.xml.bz2$1|</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="_nogetinfo">
<title>NoGetINFO</title>
<simpara>This indicates that the hub doesn&#8217;t need to receive a $GetINFO froma  client to send out $MyINFO. This is a variation of the QuickList proposal that is easy to implement and does half of QuickList&#8217;s job.</simpara>
<simpara>Add NoGetINFO to the $Supports to indicate support for this.</simpara>
</section>
<section id="_bzlist">
<title>BZList</title>
<simpara>Signals support for BZIP2 compressed file list instead of the Huffman encoded list that NMDC pioneered. The compressed file list is available for download under the name MyList.bz2 instead of MyList.DcLst and files.xml.bz2 instead of files.xml.</simpara>
<simpara>Add BZList to the $Supports to indicate support for this.</simpara>
</section>
<section id="_chunk">
<title>CHUNK</title>
<simpara>This is a protocol extension by Valknut that allows retrieval of sections of a file through a modified $Get syntax. The syntax is:
$Get &lt;filename&gt;$&lt;start-position&gt;$&lt;chunk-size&gt;|</simpara>
<simpara>Add CHUNK to the $Supports to indicate support for this.</simpara>
</section>
<section id="_opplus">
<title>OpPlus</title>
<simpara>Characteristics of a hub. Indicates that the hub uses additional commands for operators. For example: $Ban, $TempBan, $UnBan, $GetBanList, $WhoIP, $Banned, $GetTopic, $SetTopic and more.</simpara>
</section>
<section id="_feed">
<title>Feed</title>
<simpara>This feature offers additional protocol commands notice. Feature allows you to track all the actions of the individual or all users benefit from logging these actions, and notify operators of the hub acts committed by a newly created chat room.</simpara>
</section>
<section id="_saltpass">
<title>SaltPass</title>
<simpara>This feature offers passwords to be salted and hashed, which means that passwords are no longer sent in plaintext. This adds "random data" to the $GetPass command.</simpara>
<simpara>The random data should be Base32 encoded.</simpara>
<simpara>The data that is sent back in the $MyPass shall be the password followed by the random data, passed through the Tiger algorithm and then encoded with Base32. I.e., base32( tiger_hash( password + data ) ).</simpara>
<simpara>Add SaltPass to the $Supports to indicate support for this.</simpara>
<simpara>Note that the example below for $MyPass is not literal.</simpara>
<simpara>The algorithm here is a port from ADC&#8217;s GPA/PAS.</simpara>
<simpara>Example</simpara>
<informalexample>
<literallayout class="monospaced">$GetPass data|
$MyPass base32( tiger_hash( password + data ) )|</literallayout>
</informalexample>
</section>
<section id="_ipv4">
<title>IPv4</title>
<simpara>This feature is used to indicate IPv4 support when a client is connecting from a IPv6 address.</simpara>
<simpara>The hub should send a $ConnectToMe to the client, to indicate a download from the hub. The client will connect to the hub address and port as in a normal client to client connection, this time using the client&#8217;s IPv4 address. The hub should disconnect after it has received the $MyNick command.</simpara>
<simpara>The hub should later verify in connection attempts with other IPv4 clients that the IPv4 address matches.</simpara>
<simpara>Once the hub has received an IPv4 connection and gathered the IPv4 address, it should set the IPv4 bit in the $MyINFO command.</simpara>
<simpara>Add IPv4 to the $Supports to indicate support for this.</simpara>
</section>
<section id="_ipv6">
<title>IPv6</title>
<simpara>This feature is used to indicate IPv6 support.</simpara>
<simpara>IPv6 addresses are specified in RFC 4291 form.</simpara>
<simpara>If the client has an IPv4 connection, it should also signal the use of IPv4. Clients should use the same TCP and UDP ports for both IPv4 and IPv6 if both are supported. The connection mode (passive, active, SOCKS5) can be different.</simpara>
<simpara>The hub is required to set the IPv6 bit in the $MyINFO command.</simpara>
<simpara>The connection mode in the $MyINFO tag changes from "M:X" where X is the connection mode (A = Active, B = Passive, 5 = SOCKS5) to "M:XY" where X is the connection mode of IPv4 and Y is the connection mode of IPv6. If a client does not support IPv4 or the IPv4 check failed, the first character will be <emphasis>N</emphasis> for not supported.</simpara>
<simpara>Add IP64 to the $Supports to indicate support for this.</simpara>
<simpara>A client that support IPv4 and IPv6 will only use one form when sending messages to a hub. The hub is responsible for translating the command into the correct IPv4/IPv6 address. E.g., if a $Search is sent with a IPv6 address, the hub will send the client&#8217;s IPv4 address to those who only support IPv4. This minimizes the amount of traffic toward the hub. If a client sent a passive search request, then it is only sent to active users supporting the same TCP/IP protocol. This is regardless if the client is active in the other protocol. I.e., if a passive search request is sent with a IPv4 address, that search request will only be forwarded to IPv4 users and not <emphasis>converted</emphasis> to an IPv6 request, regardless if the client is active in IPv6.</simpara>
</section>
<section id="_tls">
<title>TLS</title>
<simpara>This feature is used to indicate support for TLS encrypted client-client connections.</simpara>
<simpara>Implementations shall add an <emphasis>S</emphasis> to the (TLS) port in a $ConnectToMe.</simpara>
<simpara>Add TLS to the $Supports to indicate support for this.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$ConnectToMe john 192.168.0.1:412S|</literallayout>
</informalexample>
</section>
<section id="_dht">
<title>DHT</title>
<simpara>This feature is used to indicate support for Distributed Hash Tables (DHT) for client-client connections.</simpara>
<simpara>This feature uses ADC commands for the DHT swarm <footnote id="StrongDC++ DHT"><simpara><ulink url="http://strongdc.sourceforge.net/download/StrongDC_DHT.pdf">http://strongdc.sourceforge.net/download/StrongDC_DHT.pdf</ulink></simpara></footnote>.</simpara>
<simpara>Add DHT0 to the $Supports to indicate support for this.</simpara>
</section>
<section id="_queue_position">
<title>Queue position</title>
<literallayout class="monospaced">$MaxedOut queue_position|</literallayout>
<simpara>This feature is a support for a queue numbering system for client-client connections. See <footnote id="ADC-Ext QP"><simpara><ulink url="http://adc.sourceforge.net/ADC-EXT.html#_qp_upload_queue_notification">http://adc.sourceforge.net/ADC-EXT.html#_qp_upload_queue_notification</ulink></simpara></footnote> for further information on the ADC equivalent.</simpara>
<simpara>This feature extends $MaxedOut by adding a number after it.</simpara>
<simpara>Note that there is no feature to announce in $Supports.</simpara>
<simpara>Example:</simpara>
<informalexample>
<literallayout class="monospaced">$MaxedOut 2|</literallayout>
</informalexample>
</section>
<section id="_failover">
<title>FailOver</title>
<literallayout class="monospaced">$FailOver [host[,host]]|</literallayout>
<simpara>This feature is used to indicate support for providing alternative hub addresses in the event that the hub is unavailable. See <footnote id="ADC-Ext FO"><simpara><ulink url="http://adc.sourceforge.net/ADC-EXT.html#_fo_failover_hub_addresses">http://adc.sourceforge.net/ADC-EXT.html#_fo_failover_hub_addresses</ulink></simpara></footnote> for further information on the ADC equivalent.</simpara>
<simpara>Used a comma (,) to separate hub addresses.</simpara>
<simpara>The command can be sent at any time by the hub, overwriting or replacing the addresses of the previous command. An empty command (no hosts) clears the list of alternative addresses.</simpara>
<simpara>Add FailOver to the $Supports to indicate support for this.</simpara>
<simpara>Examples:</simpara>
<informalexample>
<literallayout class="monospaced">$FailOver|
$FailOver example.com:412|
$FailOver example.com,example.org:5555,adc://example.net:6666|</literallayout>
</informalexample>
</section>
<section id="_hub_icon">
<title>Hub icon</title>
<literallayout class="monospaced">$SetIcon image_uri|</literallayout>
<simpara>This feature is used to indicate an icon to use for the hub. The image_uri is an URI linking to the image that should be used. The URI is specified with "http://", "https://" or "www.".</simpara>
<simpara>Hubs that send this also support HubINFO.</simpara>
<simpara>Examples:</simpara>
<informalexample>
<literallayout class="monospaced">$SetIcon www.example.com/images/myimage.ico|
$SetIcon http://hub.example.org/img/image.ico|</literallayout>
</informalexample>
</section>
</section>
</section>
<section id="_examples">
<title>Examples</title>
<section id="_client_hub_connection">
<title>Client – Hub connection</title>
<simpara>See respective command for description of command and parameters.</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Client </entry>
<entry align="left" valign="top">Hub</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Lock EXTENDEDPROTOCOL_verlihub Pk=version0.9.8e-r2|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Supports UserCommand UserIP2 TTHSearch ZPipe0 GetZBlock|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Key 011010110110010101111001|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$ValidateNick johndoe|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>&lt;VerliHub&gt; This hub is running version 0.9.8e-r2 (Monday Jul 20 2009) of VerliHub (RunTime: 2weeks 1hours  / Current user count: 4)|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>&lt;VerliHub&gt; This hub is enhanced by plugman for Verlihub.|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Supports OpPlus NoGetINFO NoHello UserIP2 HubINFO|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$HubName Verlihub|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$GetPass|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$MyPass mysecurepass55555|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Hello johndoe|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Version 1,0091|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$GetNickList|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$MyINFO $ALL johndoe &lt;++ V:0.673,M:P,H:0/1/0,S:2&gt;$ $LAN(T3)0x31$<ulink url="mailto:example@example.com">example@example.com</ulink>$1234$|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$LogedIn johndoe|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$NickList BotTestNickaaaVerliHubbbbOpChat|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>&lt;MOTD&gt; This is the MOTD message.|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$HubTopic The topic of the hub is not set.|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$OpList TestNickaaabbbVerliHubOpChat$$|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$BotList BotVerliHubOpChat$$|</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section id="_client_client_connection">
<title>Client – Client connection</title>
<simpara>Note the connecting client is the client, but that the server speaks first.</simpara>
<simpara>See respective command for description of command and parameters.</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Client </entry>
<entry align="left" valign="top">Server</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$MyNick bbb|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$MyNick aaa|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Lock EXTENDEDPROTOCOLABCABCABCABCABCABC Pk=DCPLUSPLUS0.706ABCABC|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Lock EXTENDEDPROTOCOLABCABCABCABCABCABC Pk=DCPLUSPLUS0.777Ref=dchub://example.org:411|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Supports MiniSlots XmlBZList ADCGet TTHL TTHF ZLIG|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Direction Download 31604|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$Key 011010110110010101111001|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Supports MiniSlots XmlBZList ADCGet TTHL TTHF ZLIG|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Direction Upload 82|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$Key 011010110110010101111001|</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>$ADCGET file files.xml.bz2 0 -1 ZL1|</simpara></entry>
<entry align="left" valign="top"><simpara></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara></simpara></entry>
<entry align="left" valign="top"><simpara>$ADCSND file files.xml.bz2 0 29725 ZL1|</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section id="_license">
<title>License</title>
<simpara>This document is licensed under the New BSD License (3-clause BSD license).</simpara>
</section>
</article>
